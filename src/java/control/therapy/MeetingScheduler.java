/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package control.therapy;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.annotation.Resource;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;
import javax.transaction.UserTransaction;
import model.Appointment;
import model.Therapist;
import model.Users;
import model.therapyService.AppointmentService;
import model.therapyService.MessageService;

@WebListener
public class MeetingScheduler implements ServletContextListener {
    @PersistenceContext
    EntityManager em;
    @Resource
    UserTransaction utx;
    private ScheduledExecutorService scheduler;

    @Override
    public void contextInitialized(ServletContextEvent sce) {
        scheduler = Executors.newSingleThreadScheduledExecutor();
        scheduler.scheduleAtFixedRate(() -> {
            MessageService ms = new MessageService(em, utx);

            AppointmentService as = new AppointmentService(em,utx);
            List<Appointment> appList = new ArrayList<>(as.getAllAppointment());
            for(Appointment app: appList){
                LocalDate date = convertDate(app.getTimeslotid().getTsdate());
                LocalTime time = convertTime(app.getTimeslotid().getStarttime());
                if(date.equals(LocalDate.now())&& !app.getLinksent()){
                    Users user =  app.getUserid();
                    Therapist therapist = app.getTimeslotid().getTherapistid();
                    
                    String content = "Your appointment link: <a href='" + app.getAppointmentlink() + "'>" + app.getAppointmentlink() + "</a></br>[This message is generated by the System.]";                    ms.addMessage(content, "SYSTEM", user, therapist);
                    content = content.replace("|", ""); // Remove or escape delimiters
                    ChatWebSocket.broadcast("appointment_link:" + therapist.getTherapistid() + "|" + user.getUserid() + "|" + content);
                    
                    as.updateLinkSent(app);
                }
            }      
                                    System.out.println("DETECTING");

        }, 12, 10, TimeUnit.SECONDS);
    }

    public void contextDestroyed(ServletContextEvent sce) {
        scheduler.shutdownNow();
    }
    
    
    public LocalDate convertDate(Date dateToConvert) {
        return dateToConvert.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
    }
    
    public LocalTime convertTime(Date date) {
        return date.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalTime();
    }
}

